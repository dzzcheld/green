package get_0615;

public class Memo_06_15 {

}
/*
 * <List>
 * 
 * ArrayList
 *-내부적으로 데이터를 배열에서 관리하며 데이터의 추가, 삭제를 위해
 * 아래와 같이 임시 배열응 생성해 데이터를 복사 하는 방법을 사용한다.
 *(복사가 많이 일어나면 성능저하를 일으킬 수 있지만, 각 데이터 검색에는 유리하다)
 *
 *LinkedList
 *-데이터의 추가, 삭제시 불필요한 데이터의 복사가 없어(임시 배열을 생성하지 않음)
 *데이터의 추가, 삭제시에 유리하다.
 *검색시에는 처음부터 노드를 순회해야 하기 때문에 성능상 불리하다.
 *
 *=>
 *get/set은 ArrayList
 *처음이나 끝에 잦은 삽입, 삭제는 LinkedList
 *
 *System.nanoTime();
 * 현재 JVM의 시간값을 단위로 반환하는 메서드
 * 오직 경과된 시간을 측정하는데 사용, 시스템이나 기각과는 아무련 연관성이 없음을 말함.
 * 
 * -String.valueOf()
 * 객체를 String 문자열 참조 자료형으로 형 변환하는 역할을 한다.
 * 전달받은 파라미터가 null일 경우 문자열 "null"을 반환한다.
 *
 *list.add() 
 *주어진 객체를 맨 끝에 추가합니다. 
 *
 *size()
 *저장되어 있는 전체 객체 수를 리턴한다.
 *======================================================================================
 *
 *<Set>
 * <HashSet>
 * =set 인터페이스의 구현 클래스
 * =기본 생성자 호출하여 생성
 *
 **Iterator
 *자바의 컬렉션 프레임워크(List, Set, Map...)에서 컬렉션에 저장디어 잇는 요소들을 읽어오는 방법 중 하나.
 *컬렉션 프레임워크에서 쉽게 값을 가져오고 제거할 수 있음
 *단방향 반복만 가능, 값을 변경 및 추가는 불가하고 대량의 데이터 처리는 느리다
 *
 *iterator.hashNext()
 *set에서 객체를 가져온다, 객체가 있으면 true 없으면 false
 *
 *
 *
 *
 *
 *=======================================================================================================
 *<Map 컬렉션>
 *
 *
 *
 *
 *
 *
 */


