package get_0614;

public class Memo {

}
/*
 *  Thread 객체 생성
 * 
 * 
 * thread.start()
 * start메소드는 실행 후에 곧바로 종료된다.
 * 
 * 쓰레드를 실행하는 코드(오버라이딩)
 * Thread의 서브 클래스를 만들어 run() 메소드를 오버라이딩 한다.
 * run() 메소드는 Thread의 start() 메소드가 호춤됐을 때 실행되는 메소드.
 * 
 * 쓰레드 실행 코드(방법)
 * java.lang.Runnable 인터페이스를 구현한 오브젝트를 Thread의 생성자의 파라미터로 남기는 방법.
 * 
 * ------------------------------------------------------------------------
 * Thread thread=new Thread(beepTask);// 클래스 인스턴스를 쓰레드의 생성자로 전달한다(run())
 * 
 * Runnable
 * 클래스는 상속받으면 다른 클래스를 상속받을 수 없기에, 
 * 인터페이스인 Runnable 로 구현하는 방법이 일반적이다.(다른 클래스를 상속받기 위해)
 * 재사용성이 높고 코드의 일관서을 유지할 수 있다.
 * 
 * 
 * -----------------------------------------------------------------------
 * 동기화 메소드 synchronized
 * -스레드가 사용 중인 객체를 다른 스레드가 변경할 수 없게 하려면 스레드 작업 끝날 때까지
 * 객체에 잠금 걸어야 함.
 * 
 * 임계영역
 * 단 하나의 스레드만 실행할 수 있는 코드 영역
 * 
 * =>
 * 공유객체에 synchronized 메소드로 해줘야 된다.
 * 
 * --------------------------------------------------------------------
 * 제네릭
 * 
 * 다향성과 매우 비슷하며 타입이 자유롭다.
 * *
 */
